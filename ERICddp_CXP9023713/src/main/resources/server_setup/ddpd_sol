#! /bin/bash

INTERVAL=60
SLEEP_TIME=10

DDPD_EXIT_FILE=/tmp/ddpd.exit
MANAGER_EXIT_FILE=/tmp/ddp_manager.exit
WORKER_EXIT_FILE=/tmp/ddp_worker.exit

TIMESTAMP_FILE=/tmp/ddpd.timestamp

DDP_DIR=$(realpath /data/ddp/current)
MANAGER=${DDP_DIR}/analysis/main/manager
WORKER=${DDP_DIR}/analysis/main/worker
RUN_SQL=${DDP_DIR}/analysis/sql/runSql
PID_FILE=/tmp/ddpd.pid
SITE_LOCK_DIR=/data/tmp/site_lock

runddpd() {
    # In bash-subshell (which is what this function executes in), $$ is
    # actually the PID of the parent shell
    # We need to use BASHPID to get the PID of the subshell (only available on Linux)
    if [ ! -z "${BASHPID}" ] ; then
        PID=${BASHPID}
    else
        PID=$$
    fi
    echo $PID > ${PID_FILE}
    rm -f ${DDPD_EXIT_FILE} ${MANAGER_EXIT_FILE} ${WORKER_EXIT_FILE}.* > /dev/null 2>&1
    DATE=`date`
    echo "${DATE} Starting (${PID})"

    # Now we need to wait here until we the database is available
    local DB_UP=0
    while [ ${DB_UP} -eq 0 ] ; do
        mysqladmin --host=dbhost ping
        if [ $? -eq 0 ] ; then
            DB_UP=1
        else
            echo "DB not up yet"
            sleep 15
        fi
    done

    su - statsadm -c "${MANAGER} /data/stats/config" &

    # Clear site_lock directory before starting workers
    if [ -d ${SITE_LOCK_DIR} ] ; then
        find ${SITE_LOCK_DIR} -type f -delete
    fi

    ${RUN_SQL} <<EOF > /tmp/worker_hostnames.txt
use ddpadmin;
SELECT hostname FROM workers;
EOF
    WORKER_HOSTNAME_LIST=$(cat /tmp/worker_hostnames.txt)
    if [ -z "${WORKER_HOSTNAME_LIST}" ] ; then
        ${RUN_SQL} <<EOF
use ddpadmin;
INSERT INTO workers (hostname) VALUES ('localhost');
EOF
        WORKER_HOSTNAME_LIST="localhost"
    fi
    for WORKER_HOSTNAME in ${WORKER_HOSTNAME_LIST} ; do
        su - statsadm -c "${WORKER} /data/stats/config ${WORKER_HOSTNAME}" &
    done

    while [ ! -e ${DDPD_EXIT_FILE} ] ; do
          sleep ${SLEEP_TIME}
    done

    DATE=`date`
    echo "${DATE} Shutting down"

    su - statsadm -c "touch ${MANAGER_EXIT_FILE}"
    for WORKER_HOSTNAME in ${WORKER_HOSTNAME_LIST} ; do
        su - statsadm -c "touch ${WORKER_EXIT_FILE}.${WORKER_HOSTNAME}"
    done

    wait

    rm -f ${PID_FILE}
    rm -f ${DDPD_EXIT_FILE}
}

start() {
    if [ -r ${PID_FILE} ] ; then
        PID=`cat ${PID_FILE}`
        echo "ERROR: Cannot start ddpd: already running (${PID})"
        exit 1
    fi

    for SCRIPT in ${MANAGER} ${WORKER} ; do
        pgrep -f ${SCRIPT} > /dev/null
        if [ $? -eq 0 ] ; then
            echo "ERROR: ${SCRIPT} is already running"
            exit 2
        fi
    done

    $0 run
}

stop() {
    if [ ! -r ${PID_FILE} ] ; then
        echo "ERROR: ddp does not seem to be running"
        exit 1
    fi

    PID=`cat ${PID_FILE}`
    echo "Stopping ddpd (${PID})"

    touch $DDPD_EXIT_FILE
    while [ -e ${DDPD_EXIT_FILE} ] ; do
        sleep 1
    done
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;

    run)
        if [ -r /data/ddp/log/ddpd.log ] ; then
            /bin/cat /data/ddp/log/ddpd.log >> /data/ddp/log/ddpd.log.bak
            /bin/cp /dev/null /data/ddp/log/ddpd.log
        fi
        runddpd >> /data/ddp/log/ddpd.log 2>&1 &
        ;;
    *)
        echo $"Usage: $0 {start|stop}"
        exit 1
esac
