#!/bin/bash

set -a

cd `dirname $0`
ANALYSIS_BIN=`pwd`
ANALYSIS_BIN="${ANALYSIS_BIN}/../.."

CSLIB_DATA_DIR=$1
OUTPUT_DIR=$2
DASH_DATE=$3
SITE=$4
SQL_DATE=$5

# Assume CSLIB_DATA_DIR=${DATA_DIR}/OSS/cs
DATA_DIR=${CSLIB_DATA_DIR}/../..

PERL5OPT="-I${ANALYSIS_BIN}/common"

if [ -z "${TMP_DIR}" ] ; then
    TMP_DIR=/tmp
fi

INSTR_CFG=${DATA_DIR}/instr.cfg
INSTR_FILE=${DATA_DIR}/instr.txt
# Handle case where cfg file doesn't exist
if [ ! -r ${INSTR_CFG} ] ; then
    exit 0
fi

if [ ! -d ${OUTPUT_DIR}/cslib ] ; then
    mkdir ${OUTPUT_DIR}/cslib
fi


# function parseStats()
# Parses the instr.cfg file for the relevant data
# Args: objectName dbTable outputDir

parseJmxStats() {
	OBJ_NAME=$1
	DB_TABLE=$2
	STATS_OUTPUT_DIR=$3
	NAMES=$(grep "^JMXPROPS," ${INSTR_CFG} | awk -F, '$4 ~ /'${OBJ_NAME}'/ {print $2}')
	#echo "OBJ_NAME=${OBJ_NAME} Got names: ${NAMES} from ${INSTR_CFG}"
	if [ ! -z "${NAMES}" ] ; then
		STORE_NAMES=$(echo ${NAMES} | sed 's/ /,/g')
		#echo "STORE_NAMES: ${STORE_NAMES}"
		$(dirname $0)/storeNames --table=jmx_names --site=${SITE} --names=${STORE_NAMES}
		for name in ${NAMES} ; do
		    echo "  ${name}"
			DATA_FILE=${STATS_OUTPUT_DIR}/jmxprops_${name}.txt
			# CacheHits/CacheMisses running nulls so replace with 0
			awk '$3 ~ /'${name}'/ {print $0}' ${INSTR_FILE} | sed 's/null/0/g' > ${STATS_OUTPUT_DIR}/jmxprops_${name}.txt
			# Get the column headings
			COLS=$(awk -F, '$2 ~ /'${name}'/ {for (i = 5 ; i <= NF ; i++) print $i}' ${INSTR_CFG})
			#echo "Got cols ${COLS}"
			COLCOUNT=$(echo ${COLS} | wc -w | awk '{print $1}')
			#echo "Got $COLCOUNT cols for ${name}"
			# Build up the SQL query
			COLSQL="(time,siteid,nameid,"
			for col in ${COLS} ; do
				COLSQL="${COLSQL}${col},"
			done
			COLSQL=$(echo ${COLSQL} | sed 's/,$//')
			COLSQL="${COLSQL})"
			SQLFILE=${STATS_OUTPUT_DIR}/jmxprops_${name}.sql
			cat > ${SQLFILE} <<EOF
SET @siteid=(SELECT id FROM sites WHERE sites.name = "${SITE}");
SET @jmxid=(SELECT id FROM jmx_names WHERE jmx_names.name = "${name}");
DELETE from ${DB_TABLE} where siteid = @siteid AND nameid = @jmxid and time > '${SQL_DATE}:00:00:00' AND time <= '${SQL_DATE}:23:59:59';
INSERT INTO ${DB_TABLE} ${COLSQL} VALUES
EOF
			# This next bit includes a hack - if there are not enough cols in the
			# data file we pad with 0. This is silly because we don't know which column
			# it was that we failed to collect. However this will be fixed in a new release
			# of ERICdoss, so there should never be a missing column.
			awk 'BEGIN { ORS=" "; NUMCOLS='${COLCOUNT}' + 3 ; DATE="'${SQL_DATE}'"}
			{
				print "(\"" DATE, $2 "\",@siteid,@jmxid,";
				for (i = 4 ; i <= NUMCOLS; i++) {
					if (i <= NF) print $i ; else print "0";
					if (i < NUMCOLS) print ",";
				} 
				print "),\n";
			}
			END {
				print "(\"" DATE, ":23:59:59\",@siteid,@jmxid,";
				for (i = 4 ; i <= NUMCOLS ; i++) {
					print 0;
					if (i < NUMCOLS) print ",";
				}
				print ");\n";
			}' ${DATA_FILE} >> ${SQLFILE}
			#echo "Running SQL query on ${SQLFILE}"
			${ANALYSIS_BIN}/sql/runSql ${SQLFILE}
		done
	fi
}

VDB_STATS_DIR=${TMP_DIR}/cslib_vdb_stats
[ ! -d ${VDB_STATS_DIR} ] && mkdir -p ${VDB_STATS_DIR}
echo " Processing VersantStatistics"
parseJmxStats "com.ericsson.nms.cif.cs:id=VersantStatistics" cslib_vdb_stats ${VDB_STATS_DIR} 

CONFIGHOME_STATS_DIR=${TMP_DIR}/cslib_confighome_stats
[ ! -d ${CONFIGHOME_STATS_DIR} ] && mkdir -p ${CONFIGHOME_STATS_DIR}
echo " Processing ConfigurationHome"
parseJmxStats "com.ericsson.nms.cif.cs:id=ConfigurationHome" cslib_confighome_stats ${CONFIGHOME_STATS_DIR}

# Plot ConfigHome stats
for file in `find ${CONFIGHOME_STATS_DIR} -type f -name "jmxprops_*-ConfigHome.txt"` ; do
    NUM_LINES=`wc -l ${file} | awk '{print $1}'`
    if [ ${NUM_LINES} -gt 0 ] ; then
	NAME=$(basename ${file} | sed 's/^jmxprops_//' | sed 's/-ConfigHome.txt$//')
	OUT_DIR="${OUTPUT_DIR}/cslib/${NAME}"
	#echo "* Plotting ConfigHome stats for $NAME into $OUT_DIR"
	[ ! -d ${OUT_DIR} ] && mkdir -p ${OUT_DIR}
	#echo "Outputting graphs to ${OUT_DIR} for ${NAME} from ${file}"
	# reformat date
	awk '{data = $1 ":" $2 ; for (i = 3 ; i <= NF ; i++) data = data " " $i; print data; }' ${file} > $file.new
	mv $file.new ${file}

	cat > ${CONFIGHOME_STATS_DIR}/plot.cmd <<EOF
set xdata time
set timefmt "%d-%m-%y:%H:%M:%S"
set xrange [ "${DASH_DATE}:00:00":"${DASH_DATE}:23:59" ]
set format x "%H:%M"
set terminal jpeg
set size 1,0.5

set output "${OUT_DIR}/ConfigurationManagerCount.jpg
set title "Cofiguration Manager Count"
plot "${file}" using 1:3 notitle with lines

set output "${OUT_DIR}/PersistenceManagerCount.jpg
set title "Persistence Manager Count"
plot "${file}" using 1:4 notitle with lines

set output "${OUT_DIR}/OngoingCsTransactionCount.jpg
set title "Ongoing CS Transaction Count"
plot "${file}" using 1:5 notitle with lines

EOF
	gnuplot ${CONFIGHOME_STATS_DIR}/plot.cmd
	if [ $? -ne 0 ] ; then
	    echo "gnuplot failed"
	    exit 1
	fi
    else
	echo " WARN: Found no data in ${file}"
    fi
done

for file in `find ${VDB_STATS_DIR} -type f -name "jmxprops_*-VDB.txt"` ; do
    NUM_LINES=`wc -l ${file} | awk '{print $1}'`
    if [ ${NUM_LINES} -gt 0 ] ; then
	NAME=$(basename ${file} | sed 's/^jmxprops_//' | sed 's/-VDB.txt$//')
	OUT_DIR="${OUTPUT_DIR}/cslib/${NAME}"
	#echo "* Plotting VDB stats for $NAME into $OUT_DIR"
	[ ! -d ${OUT_DIR} ] && mkdir -p ${OUT_DIR}
	CACHE_STATS="${VDB_STATS_DIR}/$NAME-cacheStats.txt"
	MEM_STATS="${VDB_STATS_DIR}/$NAME-memstats.txt"
	# reformat time
	awk '{data = $1 ":" $2 ; for (i = 3 ; i <= NF ; i++) data = data " " $i; print data; }' ${file} > $file.new
	mv $file.new ${file}


	COLS=`awk -F, '$2 ~ /'${NAME}-VDB'/ {for (i = 5 ; i <= NF ; i++) print $i}' ${INSTR_CFG}`
	COL_INDEX=3
	#MemoryAvailableKB,MemoryTotalKB,PmClosedDuringTx,PmCreated,PmIdleInPool,PmOpen,TxCommitted,TxRolledBack,TxStarted
	for COL in ${COLS} ; do
	    if [ "${COL}" = "MemoryAvailableKB" ] ; then
		MEM_AVAIL_COL=${COL_INDEX}
	    elif [ "${COL}" = "MemoryTotalKB" ] ; then
		MEM_TOT_COL=${COL_INDEX}
	    elif [ "${COL}" = "PmClosedDuringTx" ] ; then
		PM_CLOSED_COL=${COL_INDEX}
	    elif [ "${COL}" = "PmCreated" ] ; then
		PM_CREATED_COL=${COL_INDEX}
	    elif [ "${COL}" = "PmIdleInPool" ] ; then
		PM_IDLE_COL=${COL_INDEX}
	    elif [ "${COL}" = "PmOpen" ] ; then
		PM_OPEN_COL=${COL_INDEX}
	    elif [ "${COL}" = "TxCommitted" ] ; then
		TX_COMMIT_COL=${COL_INDEX}
	    elif [ "${COL}" = "TxRolledBack" ] ; then
		TX_ROLLBACK_COL=${COL_INDEX}
	    elif [ "${COL}" = "TxStarted" ] ; then
		TX_STARTED_COL=${COL_INDEX}
	    fi
	    
	    COL_INDEX=`expr ${COL_INDEX} + 1`
	done

	# generate memory statistics
	awk "{print \$1 \" \" (\$$MEM_TOT_COL - \$$MEM_AVAIL_COL) \" \" \$$MEM_TOT_COL;}" ${file} > ${MEM_STATS}


	cat > ${VDB_STATS_DIR}/plot.cmd <<EOF
set xdata time
set timefmt "%d-%m-%y:%H:%M:%S"
set xrange [ "${DASH_DATE}:00:00":"${DASH_DATE}:23:59" ]
set format x "%H:%M"
set terminal jpeg
set size 1,0.5

set output "${OUT_DIR}/MemoryUsage.jpg
set title "Memory Usage"
plot "${MEM_STATS}" using 1:2 title "Used Memory (Kb)" with lines, "${MEM_STATS}" using 1:3 title "Total Memory (Kb)" with lines

set output "${OUT_DIR}/PmClosedDuringTx.jpg
set title "PM Closed During Tx"
plot "${file}" using 1:${PM_CLOSED_COL} notitle with lines

set output "${OUT_DIR}/PmCreated.jpg
set title "PM Created"
plot "${file}" using 1:${PM_CREATED_COL} notitle with lines

set output "${OUT_DIR}/PmIdleInPool.jpg
set title "PM Idle In Pool"
plot "${file}" using 1:${PM_IDLE_COL} notitle with lines

set output "${OUT_DIR}/PmOpen.jpg
set title "PM Open"
plot "${file}" using 1:${PM_OPEN_COL} notitle with lines

set output "${OUT_DIR}/Transactions.jpg
set title "Transactions"
plot "${file}" using 1:${TX_COMMIT_COL} title "Tx Committed" with lines, "${file}" using 1:${TX_ROLLBACK_COL} title "Tx Rolled Back" with lines, "${file}" using 1:${TX_STARTED_COL} title "Tx Started" with lines

EOF
	gnuplot ${VDB_STATS_DIR}/plot.cmd
    else
	echo " WARN: Found no data in ${file}"
    fi

done
