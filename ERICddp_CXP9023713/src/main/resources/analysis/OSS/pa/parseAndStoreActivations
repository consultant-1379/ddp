#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Time::Local;
use StatsDB;
use DBI;
use Data::Dumper;
use PlannedArea;

# Get input parameters
my ($sqlDate,$site,$outdir,$DEBUG);

my $result = GetOptions(
    "date=s"  => \$sqlDate,
    "site=s" => \$site,
    "outdir=s" => \$outdir,
    "debug=s"   => \$DEBUG
);
($result == 1) or die "Invalid args";

# Adjust date parameters
if($sqlDate !~ /^\d{4}-\d{2}-\d{2}$/) {
    die ("Invalid date format provided");
}

my ($yy,$mm,$dd) = $sqlDate =~ /^\d{2}(\d{2})-(\d{2})-(\d{2})$/;
my $date = "$dd$mm$yy";

# Get Site ID
my $dbh = connect_db();
my $siteId = getSiteId($dbh,$site);

# Initialize variables
my $lvlog = "$outdir/lvlog.log";

# Generate LvLog subfiles containing relevant data for parsing
my $tmpStoreJobId = "/var/tmp/tmpStoreJobId.$$";
`egrep "Job ID.* Activity ID" $lvlog > $tmpStoreJobId`;

our $tmpParseLvLog = "/var/tmp/tmpParseLvLog.$$";
`egrep "COMMAND .*(ACTIVATE_PLANNED_CONFIGURATION|cms_nead_seg)" $lvlog > $tmpParseLvLog`;

# Declare variables
my (%ActId2JobId,%activations);

# Generate ActivationID-JobID hash
%ActId2JobId = storeJobId($tmpStoreJobId);

# Parse LvLog
%activations = parseLvLog($tmpParseLvLog, $siteId, %ActId2JobId, $DEBUG, \%activations);

# Store PA Activations
storePaActivation($siteId,$sqlDate,$DEBUG,%activations);

# Cleanup temporary files
`rm -f $tmpStoreJobId $tmpParseLvLog`; # Remove temp files

# END OF SCRIPT
