#!/bin/bash

ANALYSIS_BIN=`dirname $0`
ANALYSIS_BIN=`cd ${ANALYSIS_BIN} ; cd .. ; pwd`

EVENTS_FILE=$1
DASH_DATE=$2
ANALYSIS_OUTPUT=$3
PM_SCANNERLIST=$4
PM_PROFILELIST=$5
SITE=$6
SQL_DATE=$7

GLOBAL_PREDEF_DIR=$8

OSS_DATA_DIR=`dirname ${EVENTS_FILE}`

if [ -z "${TMP_DIR}" ] ; then
    TMP_DIR=/tmp
fi
if [ -z "${INCR_DIR}" ] ; then
    INCR_DIR=${TMP_DIR}
fi

OUTPUT_DIR=${ANALYSIS_OUTPUT}/pms
if [ ! -d ${OUTPUT_DIR} ] ; then
    mkdir ${OUTPUT_DIR}
fi

# Add this dir to the perl include path
export PERL5OPT="${PERL5OPT} -I${ANALYSIS_BIN}/pm"

# Log stuff
LOG_LINE_FORMAT="s"
DATE=`echo ${DASH_DATE} | sed 's/-//g'`
export ANALYSIS_BIN SITE DATE LOG_LINE_FORMAT
. ${ANALYSIS_BIN}/common/functions.sh

if [ -d ${TMP_DIR}/events ] ; then
    EVENTS_FILE=${TMP_DIR}/events/1p1
    DELETE_EVENTS_FILE=0
else
    SRC_EVENTS_FILE=${EVENTS_FILE}
    EVENTS_FILE=${TMP_DIR}/1p1.events
    DELETE_EVENTS_FILE=1

    cat ${SRC_EVENTS_FILE} | ${ANALYSIS_BIN}/events/filterEvents -p 1p1 | ${ANALYSIS_BIN}/events/filterEvents -r INFO > ${EVENTS_FILE}
fi

if [ -d ${OSS_DATA_DIR}/pms ] ; then
    PREDEF_FILE_LIST=`find ${OSS_DATA_DIR}/pms -name 'RNC_PREDEF*'`
    for PREDEF_FILE in ${PREDEF_FILE_LIST} ; do
    # Ignore empty files
    NUM_LINES=`egrep -v '^$|WARNING Could not find named scanners' ${PREDEF_FILE} | wc -l | awk '{print $1}'`
    if [ ${NUM_LINES} -gt 0 ] ; then
        MIM_VER=`basename ${PREDEF_FILE} | sed 's/RNC_PREDEF\.v//'`
        if [ -r ${GLOBAL_PREDEF_DIR}/${MIM_VER} ] ; then
            egrep -v '^SubNetwork|^$' ${GLOBAL_PREDEF_DIR}/${MIM_VER} > ${TMP_DIR}/${MIM_VER}.global
            egrep -v '^SubNetwork|^$' ${PREDEF_FILE} > ${TMP_DIR}/${MIM_VER}.site
            diff ${TMP_DIR}/${MIM_VER}.global ${TMP_DIR}/${MIM_VER}.site > /dev/null
            if [ $? -ne 0 ] ; then
                echo "WARN: ${PREDEF_FILE} differs from ${GLOBAL_PREDEF_DIR}/${MIM_VER}"
            fi
        else
            cp ${PREDEF_FILE} ${GLOBAL_PREDEF_DIR}/${MIM_VER}
        fi
    else
        SHORT_PREDEF_FILE=`basename ${PREDEF_FILE}`
        echo "WARN: Ignoring invalid file ${SHORT_PREDEF_FILE}"
    fi
    done
fi

if [ -r ${OSS_DATA_DIR}/tz.txt ]; then
    UTC_HOUR=`cat ${OSS_DATA_DIR}/tz.txt | awk -F:: '{print $3}'`
    LOCAL_HOUR=`cat ${OSS_DATA_DIR}/tz.txt | awk -F:: '{print $2}'`
    TZOFFSET=`expr ${LOCAL_HOUR} - ${UTC_HOUR}`
    if [ $TZOFFSET -gt 12 ] ; then
        TZOFFSET=`expr ${TZOFFSET} - 24`
    fi
fi

if [ -r ${EVENTS_FILE} ] ; then
    if [ ! -z "${TZOFFSET}" ] ; then
        OFFSET="--offset ${TZOFFSET}"
    fi

    if [ "${PM_SCANNERLIST}" != "NA" ]; then # Path to pm_scannerlist.txt passed
        PROFILE_ARG=""
        RNC_CNTR_ARGS=""
        if [ ${PM_PROFILELIST} != "NA" ] ; then
            PROFILE_ARG="--profile ${PM_PROFILELIST}"

            if [ -r ${OSS_DATA_DIR}/countmo.rnc ] ; then
                RNC_CNTR_ARGS="--mocount ${OSS_DATA_DIR}/countmo.rnc --melist ${OSS_DATA_DIR}/melist.txt --predef ${GLOBAL_PREDEF_DIR}"
                if [ ! -d ${OUTPUT_DIR}/rnc_counters ] ; then
                    mkdir ${OUTPUT_DIR}/rnc_counters
                fi
            fi
        fi

        # Now all the file transfer analysis is based on the ftpOutput file
        # so don't pass the events file anymore
        run ${ANALYSIS_BIN}/pm/getPmsStats \
        --scannerlist ${PM_SCANNERLIST} \
        --outputdir ${OUTPUT_DIR} ${OFFSET} \
        --site "${SITE}" --date "${SQL_DATE}" \
        ${PROFILE_ARG} ${RNC_CNTR_ARGS}
    else
        run ${ANALYSIS_BIN}/pm/getPmsStats --events ${EVENTS_FILE} --never ${TMP_DIR}/1p1_nevercollected.events \
        --data ${TMP_DIR}/data.txt -outputdir ${OUTPUT_DIR} ${OFFSET}
    fi

    if [ $? -ne 0 ]; then
        echo "getPmsStats failed"
        exit 1
    fi

    cat > ${TMP_DIR}/cmd_events.txt <<EOF
set xdata time
set timefmt "%H:%M"
set xrange [ "00:00:00":"23:59:59" ]
set format x "%H:%M"
set terminal jpeg medium
set style fill solid

set output "${OUTPUT_DIR}/pms_collected.jpg"
set title "Files Collected"
plot "${TMP_DIR}/data.txt" using 1:2 notitle with boxes

set output "${OUTPUT_DIR}/pms_outside.jpg"
set title "Files Collected Outside normal ROP"
plot "${TMP_DIR}/data.txt" using 1:3 notitle with boxes

set yrange [ 0:* ]
set output "${OUTPUT_DIR}/pms_ropduration.jpg"
set title "Time taken to collect files for ROP peroid (sec)"
plot "${TMP_DIR}/data.txt" using 1:4 notitle with boxes

set output "${OUTPUT_DIR}/pms_calnotcollected.jpg"
set title "Not collected files based on Scanner status"
plot "${TMP_DIR}/data.txt" using 1:5 notitle with boxes

set output "${OUTPUT_DIR}/pms_repnotcollected.jpg"
set title "Files Never Collected"
plot "${TMP_DIR}/data.txt" using 1:9 notitle with boxes

set key under
set output "${OUTPUT_DIR}/pms_colldistrib.jpg
set title "File Collection Delay"
plot "${TMP_DIR}/colldistrib.txt" using 1:6 title '> 12' with boxes, "${TMP_DIR}/colldistrib.txt" using 1:5 title '9 -> 12' with boxes, "${TMP_DIR}/colldistrib.txt" using 1:4 title '6 -> 9' with boxes, "${TMP_DIR}/colldistrib.txt" using 1:3 title '3 -> 6' with boxes, "${TMP_DIR}/colldistrib.txt" using 1:2 title '0 -> 3' with boxes
EOF

    gnuplot ${TMP_DIR}/cmd_events.txt
fi

PMS_SCANNER_LIST="${OSS_DATA_DIR}/pm_pmslistpm.txt"
if [ -r ${PMS_SCANNER_LIST} ] ; then
    SET_STR=""
    TYPE_LIST="PREDEF USERDEF GPEH UETR CTR"
    for TYPE in ${TYPE_LIST} ; do
    if [ ${TYPE} = "PREDEF" ] ; then
        FILTER="PREDEF.*STATS"
    else
        FILTER="${TYPE}"
    fi

    ACT_COUNT=`cat ${PMS_SCANNER_LIST} | awk -F: '{print $NF, $3}' | egrep "^ACTIVE" | grep -c "${FILTER}"`
    SUS_COUNT=`cat ${PMS_SCANNER_LIST} | awk -F: '{print $NF, $3}' | egrep -v "^ACTIVE" | grep -c "${FILTER}"`

    if [ ! -z "${SET_STR}" ] ; then
        SET_STR="${SET_STR},"
    fi

    SET_STR="${SET_STR} act_${TYPE}=${ACT_COUNT}, sus_${TYPE}=${SUS_COUNT}"
    done

    cat > ${TMP_DIR}/pms_scan.sql <<EOF
SET @siteid=(SELECT id FROM sites WHERE sites.name = "${SITE}");
UPDATE pms_stats SET ${SET_STR} WHERE siteid=@siteid and date="${SQL_DATE}"
EOF
    ${ANALYSIS_BIN}/sql/runSql ${TMP_DIR}/pms_scan.sql
fi

# OSS_DATA_DIR is the OSS dir, look up one for the instr file
run ${ANALYSIS_BIN}/pm/parsePmsInstrStats ${DASH_DATE} ${OUTPUT_DIR} ${SITE} ${SQL_DATE} $(dirname ${OSS_DATA_DIR})

if [ -r ${OSS_DATA_DIR}/pm_ftpDataOutput.txt ] ; then
    if [ -d ${OSS_DATA_DIR}/ftpm ] ; then
        FTH_DIR_ARG="--fthdir ${OSS_DATA_DIR}/ftpm"
    else
        FTH_DIR_ARG=""
    fi

    DELAY_BEFORE_ROP=""
    if [ -r ${OSS_DATA_DIR}/smtool_config.txt ] ; then
        DELAY_BEFORE_ROP=$(egrep '^  delayBeforeROPCollection' ${OSS_DATA_DIR}/smtool_config.txt | awk '{print $2}')
    fi
    if [ -z "${DELAY_BEFORE_ROP}" ] ; then
        DELAY_BEFORE_ROP=300
    fi

    run ${ANALYSIS_BIN}/pm/parseFtpOutput --log ${OSS_DATA_DIR}/pm_ftpDataOutput.txt \
        --site ${SITE} --sqldate ${SQL_DATE} --tzoffset ${TZOFFSET} \
        --delay ${DELAY_BEFORE_ROP} \
        ${FTH_DIR_ARG} \
        --scannerlist ${OSS_DATA_DIR}/pm_scannerlist.txt
fi
