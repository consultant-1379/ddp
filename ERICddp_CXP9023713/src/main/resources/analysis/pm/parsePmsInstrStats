#!/bin/bash

cd `dirname $0`
ANALYSIS_BIN=`pwd`
ANALYSIS_BIN="${ANALYSIS_BIN}/.."

DASH_DATE=$1
OUTPUT_DIR=$2
SITE=$3
SQL_DATE=$4
DATA_DIR=$5

if [ -z "${TMP_DIR}" ] ; then
    TMP_DIR=/tmp
fi
if [ -r ${DATA_DIR}/instr.txt ] ; then
    INSTR_FILE=${DATA_DIR}/instr.txt
elif [ -r ${DATA_DIR}/instr/instr.txt ] ; then
    INSTR_FILE=${DATA_DIR}/instr/instr.txt
else
    echo "No instr file"
    exit 1
fi
if [ -r ${DATA_DIR}/instr.cfg ] ; then
    INSTR_CFG=${DATA_DIR}/instr.cfg
elif [ -r ${DATA_DIR}/instr/instr.cfg ] ; then
    INSTR_CFG=${DATA_DIR}/instr/instr.cfg
else
    echo "No instr cfg"
    exit 1
fi

findIndex() {
    METRICS=$1
    TOFIND=$2
    INDEX=`echo ${METRICS} | TOFIND=${TOFIND} awk -F',' '
    {
        for (i = 1 ; i <= NF ; i++) {
            if ($i == ENVIRON["TOFIND"]) {
                print i;
                exit;
            }
        }
    }'`
    # Add 2 - one for the date and one for the name (pms_seg)
    # Assuming a gnuplot-format output
    if [ -z "${INDEX}" ] ; then
        echo "-1"
        return
    fi
    INDEX=`expr ${INDEX} + 2`
    echo ${INDEX}
}

# Check for data
head --lines=1000 ${INSTR_FILE} | grep -v ERROR | grep "pms_seg" >> /dev/null
if [ $? -ne 0 ] ; then
    echo "WARNING: No pms_seg data in ${INSTR_FILE}"
    exit 0
fi
# There was PMS data in the file, assume we can plot these graphs
${ANALYSIS_BIN}/server/plotHeap ${INSTR_FILE} pms_seg ${DASH_DATE} ${OUTPUT_DIR}/pms_seg_mem.jpg 1,0.5
${ANALYSIS_BIN}/server/plotHeap ${INSTR_FILE} pms_reg ${DASH_DATE} ${OUTPUT_DIR}/pms_reg_mem.jpg 1,0.5

# Attempt to identify the metrics we are measuring
# Only interested in pms_seg at this stage since we don't
# collect anything other than mem info from pms_reg
PMS_METRICS=$(grep "^pms_seg" ${INSTR_CFG} | sed -e 's#/##g' -e 's#[)(]##g' -e 's#pms_seg,##')
if [ -z "${PMS_METRICS}" ] ; then
    # We're using the new-style config
    PMS_METRICS=$(grep "^selfmgt,OSS_Profile,pms_seg," ${INSTR_CFG} | sed -e 's#/##g' -e 's#[)(]##g' -e 's#selfmgt,OSS_Profile,pms_seg,##')
    if [ -z "${PMS_METRICS}" ] ; then
        echo "No pms_seg configuration in ${INSTR_CFG}"
        exit 0
    fi
fi

PMS_INSTR_FILE=${TMP_DIR}/pms_seg_instr.txt

# Construct an instrumentation metrics file with any time periods not collected removed,
# Any metrics not collected replaced with "0", and the timestamp replaced with
# the format required by gnuplot.
egrep "pms_seg" ${INSTR_FILE} | egrep -v "^ERROR|NO_STATUS" | sed -e 's#/##g' -e 's#[)(]##g' | \
PMS_METRICS=${PMS_METRICS} awk '
BEGIN {
metricCount = split(ENVIRON["PMS_METRICS"], metrics, ",");
}

{
    for (i = 1 ; i <= metricCount ; i++) {
        gsub(metrics[i],"0");
    }
    output = "";
    for (i = 1 ; i <= NF ; i++) {
        if (i == 1) {
            output = $i;
        } else if (i == 2) {
            split($i, mins, ".");
            output = output ":" mins[1];
        } else {
            output = output " " $i;
        }
    }
    print output;
}' > ${PMS_INSTR_FILE}

# We now have an instrumentation file containing only "valid" PMS_SEG properties

NUM_LINES=$(wc -l ${PMS_INSTR_FILE} | awk '{print $1}')
if [ ${NUM_LINES} -eq 0 ] ; then
    echo "${SITE}: No PMS Metrics collected"
    exit 0
fi

cat > ${TMP_DIR}/cmd.txt <<EOF
set xdata time
set timefmt "%y-%m-%d:%H:%M:%S"
set xrange [ "${DASH_DATE}:00:00:00":"${DASH_DATE}:23:59:59" ]
set format x "%H:%M"
set terminal jpeg medium size 800,400

EOF

# Graph PMS connected nodes if available
SUCC_SCANNER_INDEX=$(findIndex "${PMS_METRICS}" "Total number of NEs to list scanners on")
if [ ${SUCC_SCANNER_INDEX} -gt 0 ] ; then
    CONN_FILE=${TMP_DIR}/pms_conn.txt
    # We can plot PMS connected nodes, and NEAD delta since we collected this metric
    ${ANALYSIS_BIN}/cms/getNeadStat --input ${DATA_DIR}/OSS/nead.log --output ${TMP_DIR}/nead_alive.txt --stats ALIVE_NODES
    # Indexes for things we will plot
    LIST_SCANNERS_TIME_IDX=$(findIndex "${PMS_METRICS}" "Total time taken to perform last scanner refresh seconds")
    SUCC_LIST_SCANNERS_IDX=$(findIndex "${PMS_METRICS}" "Number of successful list scanners tasks")
    # TODO: Just use the new ${PMS_INSTR_FILE} - it's in gnuplot format
    awk '{print $1, $'${LIST_SCANNERS_TIME_IDX}', $'${SUCC_SCANNER_INDEX}', $'${SUCC_LIST_SCANNERS_IDX}'}' ${PMS_INSTR_FILE} > ${CONN_FILE}
    ${ANALYSIS_BIN}/pm/getDelta --nead ${TMP_DIR}/nead_alive.txt --pms ${CONN_FILE} --out ${TMP_DIR}/delta.txt
    cat >> ${TMP_DIR}/cmd.txt <<EOF
set output "${OUTPUT_DIR}/pms_alive.jpg"
plot "${CONN_FILE}" using 1:3 title "PMS Number_of_connected_NEs" with lines

set output "${OUTPUT_DIR}/pms_nead_delta.jpg"
plot "${TMP_DIR}/delta.txt" using 1:2 title "Delta to NEAD ALIVE_NODES" with lines

set title "Time to ListScanners(secs)"
set output "${OUTPUT_DIR}/pms_lstime.jpg"
plot "${CONN_FILE}" using 1:2 notitle with steps

set title "Number Of NEs successfully Listed"
set output "${OUTPUT_DIR}/pms_lstnum.jpg"
plot "${CONN_FILE}" using 1:4 notitle with steps
EOF
fi

# R6 Metrics - just plot separate graphs (for now)
addPlot() {
    CMDFILE=$1
    INFILE=$2
    IMGFILE=$3
    TITLE=$4
    IDX=$5
    cat >> ${CMDFILE} <<EOF
set title "${TITLE}"
set output "${IMGFILE}"
plot "${INFILE}" using 1:${IDX} notitle with lines

EOF
}

# store the time taken every time the listscanners metric is incremented. Talking to
# PMS design, apparently both of these values are incremented at the end of every
# execution, so the value of TotalTimeToPerformXXX should match the listing which caused
# TotalNoOfPollsPerformedForXXX to be incremented
for event in LIST_RNC_SCANNERS LIST_OTHER_WRAN_SCANNERS ; do
    IDX=$(findIndex "${PMS_METRICS}" "TotalTimeToPerform${event}")
    if [ ${IDX} -gt 0 ] ; then
        # draw the older graph type
        addPlot ${TMP_DIR}/cmd.txt ${PMS_INSTR_FILE} ${OUTPUT_DIR}/pms_TotalTimeToPerform${event}.jpg \
            "Total Time to perform ${event}" ${IDX}
    fi
    COUNT_IDX=$(findIndex "${PMS_METRICS}" "TotalNoOfPollsPerformedFor${event}")
    # note the != instead of > for comparing pms_count - hopefully this will also
    # handle pms restarts where the new number is gone to 0 again
    awk '
BEGIN {
    count = 0 ;
    pms_count = -1 ;
}

pms_count == -1 {
    # first value - not an increment
    pms_count = $'${COUNT_IDX}';
}

pms_count > $'${COUNT_IDX}' {
    # we wrapped, or restarted
    pms_count = $'${COUNT_IDX}';
}

pms_count < $'${COUNT_IDX}' {
    print $1 " " ++count " " $'${IDX}' ;
    pms_count = $'${COUNT_IDX}';
}' ${PMS_INSTR_FILE} > ${TMP_DIR}/scanner_poll_times_${event}.txt
    NUM_LINES=`wc -l ${TMP_DIR}/scanner_poll_times_${event}.txt | awk '{print $1}'`
    if [ ${NUM_LINES} -gt 0 ] ; then           
    cat <<EOF >> ${TMP_DIR}/cmd.txt
set title "Time to perform ${event} per ListScanners Execution"
set yrange [0:*]
set output "${OUTPUT_DIR}/pms_timesPerPollFor${event}.jpg"
plot "${TMP_DIR}/scanner_poll_times_${event}.txt" using 1:3 notitle with impulses

EOF
    else
	echo "WARN: No data found for ${event}"
    fi
done

# "status" will always be the last metric - implementation of instr requires this,
# and the data returned will consist of 4 fields:
# filesTransferred filesFailed dataVolume ropPeriod
STATUS_IDX=$(findIndex "${PMS_METRICS}" "status")
if [ ${STATUS_IDX} -gt 0 ] ; then
    # plot dataVolume and ropPeriod
    DV_IDX=$(expr ${STATUS_IDX} + 2)
    ROP_IDX=$(expr ${STATUS_IDX} + 3)
    awk '{print $1, $'${DV_IDX}', $'${ROP_IDX}'}' ${PMS_INSTR_FILE} > ${TMP_DIR}/datacollected.txt
    cat > ${TMP_DIR}/dc_delta.pl <<EOF
\$total = 0;
\$lastTime = "";
\$lastValue = 0;
\$lastRop = "";
while ( \$line = <STDIN> )
{
    (\$time,\$value,\$rop) = \$line =~ /(\S+) (\d+) (\d+)/;
    \$delta = 0;
    if ( \$lastRop == \$rop )
    {
       \$delta = \$value - \$lastValue;
    }
    else
    {
       \$delta = \$value;
    }

    if ( \$lastTime )
    {
       print "\$lastTime ", int(\$delta / (1024*1024)), "\n";
       \$total += \$delta;
    }

    \$lastValue = \$value;
    \$lastTime = \$time;
    \$lastRop = \$rop;
}
print "\n\nTOTAL ", int(\$total/(1024*1024)), "\n";
EOF
    cat ${TMP_DIR}/datacollected.txt | perl -F ${TMP_DIR}/dc_delta.pl > ${TMP_DIR}/dc.txt
    NUM_LINES=`wc -l ${TMP_DIR}/dc.txt | awk '{print $1}'`
    if [ ${NUM_LINES} -gt 3 ] ; then # File footer is three lines
	TOTAL=`tail --lines=1 ${TMP_DIR}/dc.txt | awk '{print $2}'`
	cat >> ${TMP_DIR}/cmd.txt <<EOF
set title "Data Volume Collected"
set output "${OUTPUT_DIR}/pms_datacollected.jpg"
plot "${TMP_DIR}/dc.txt" using 1:2 notitle with steps
EOF
    fi
fi

if [ ! -z "${TOTAL}" ] ; then
    cat > ${TMP_DIR}/pms.sql <<EOF
SET @siteid=(SELECT id FROM sites WHERE sites.name = "${SITE}");
UPDATE pms_stats SET datavol=${TOTAL} WHERE siteid=@siteid and date="${SQL_DATE}"
EOF
    ${ANALYSIS_BIN}/sql/runSql ${TMP_DIR}/pms.sql
fi

gnuplot ${TMP_DIR}/cmd.txt
