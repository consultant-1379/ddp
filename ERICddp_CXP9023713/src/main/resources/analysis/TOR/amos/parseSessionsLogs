#!/usr/bin/env perl

#=====================================================================
# Script  : parseSessionsLogs
# Author  : Rory Kelly (erorkel)
# Purpose : The purpose of this script is to parse sessions_hostname.log found in the amos and scripting servers.
#           The script extracts the maximum session and process counts grouped by minute.
#           The data is then stores in the enm_amos_sessions table in statsdb.
# Usage   : parseSessionsLogs --sessions ${SESSIONS_LOG} --server ${SERVER} --site ${SITE} --date ${SQL_DATE}
#=====================================================================

use strict;
use warnings;

use Getopt::Long;
use Data::Dumper;

use StatsDB;
use DBI;

our $DEBUG = 0;

sub parseSessions($) {
    my ($sessionsFile) = @_;

    my %sessions = ();
    open INPUT, $sessionsFile or die "Cannot open $sessionsFile";
    while ( my $line = <INPUT> ) {
        if ( $DEBUG > 9 ) { print "parseSessions: $. line=$line"; }

        # Log Line format: 2017-01-09-07-07-30,Moshell Sessions: 3, Spawned Processes: 13
        if ( $line =~ /^([0-9]{4}-[0-9]{2}-[0-9]{2})-([0-9]{2})-([0-9]{2})-[0-9]{2}/ ) {
            # We group times by minutes so we set the seconds as 00.
            my $time = "$1 $2:$3:00";
            my $moshellSessions = 0;
            my $processes = 0;
            if ( $line =~ /Moshell\s*Sessions:\s*([0-9]*)/ ) {
                $moshellSessions = $1;
            }
            if ( $line =~ /Spawned\s*Processes:\s*([0-9]*)/ ) {
                $processes = $1;
            }

            # We pick the maximum values for each minute.
            if ( !exists $sessions{$time}->{'sessions'} or $moshellSessions > $sessions{$time}->{'sessions'} ) {
                $sessions{$time}->{'sessions'} = $moshellSessions;
            }
            if ( !exists $sessions{$time}->{'processes'} or $processes > $sessions{$time}->{'processes'} ) {
                $sessions{$time}->{'processes'} = $processes;
            }
        }
    }

    return \%sessions;
}

sub storeSessions($$$$) {
    my ($date,$site,$server,$r_sessions) = @_;

    my $dbh = connect_db();
    my $siteId = getSiteId($dbh, $site);
    ( $siteId != -1 ) or die "Failed to get siteid for $site";
    my $serverId = getServerId( $dbh, $siteId, $server );
    ($serverId != -1 ) or die "Failed to get serverid for $server";

    my $tmpDir = '/data/tmp';
    if (exists $ENV{'TMP_DIR'}) {
        $tmpDir = $ENV{'TMP_DIR'};
    }

    my $bcpFileName = "$tmpDir/enm_amos_sessions.bcp";
    open BCP, ">$bcpFileName" or die "Cannot open $bcpFileName";

    foreach my $r_session_time (keys %{$r_sessions}) {
        my @row = (
	    $siteId,
            $r_session_time,
            $serverId,
            $r_sessions->{$r_session_time}->{'sessions'},
            $r_sessions->{$r_session_time}->{'processes'}
        );
        print BCP join( "\t", @row ), "\n";
    }
    close BCP;

    dbDo( $dbh, "DELETE FROM enm_amos_sessions WHERE siteid = $siteId AND time BETWEEN '$date 00:00:00' AND '$date 23:59:59' AND serverid = $serverId" )
        or die "Failed to delete from enm_amos_sessions".$dbh->errstr."\n";

    dbDo( $dbh, "LOAD DATA LOCAL INFILE '$bcpFileName' INTO TABLE enm_amos_sessions" )
        or die "Failed to load new data from '$bcpFileName' file to 'enm_amos_sessions' table".$dbh->errstr."\n";

    unlink($bcpFileName);
    $dbh->disconnect;
}

sub main() {
    my ($site,$server,$date,$sessionsFile);
    my $result = GetOptions(
        "sessions=s" => \$sessionsFile,
        "server=s" => \$server,
        "site=s" => \$site,
        "date=s" => \$date,
        "debug=s" => \$DEBUG
    );
    ( $result == 1 ) or die "Invalid args";
    setStatsDB_Debug($DEBUG);

    my $r_sessions = parseSessions($sessionsFile);
    storeSessions($date,$site,$server,$r_sessions);
}

main();

