#!/usr/bin/perl
####################################################################################
#  Description --------- parseDmesg -----------
#  This script parses the dmesg hardware fault log files for DDP and stores data to DB
#  @author - Anu Antony (zantanu)
#  usage parseDmesg --logfile ${LOG_FILE} --site ${SITE} --server ${SERVER} --date ${SQL_DATE}
#####################################################################################
use strict;
use warnings;
use StatsDB;
use DBI;
use StatsTime;
use Getopt::Long;
use Data::Dumper;

###############################################################
# Globals
###############################################################

our $dbh;
our $siteId;
our $serverId;
our $DEBUG = 0;
our $date = "";

sub main {
    my ($site, $server, $logFile);
    my $result = GetOptions(
        "logfile=s"  => \$logFile,
        "site=s"     => \$site,
        "server=s"   => \$server,
        "date=s"     => \$date,
        "debug=s"    => \$DEBUG
        );
    ( -r $logFile ) or die "Cannot read log file $logFile";
    my $startTime = 0;
    my $endTime = 0;
    if($DEBUG > 1) {
        $startTime = getCurrentTimeInMilliseconds();
    }
    $dbh = connect_db();
    $siteId = getSiteId($dbh, $site);
    $serverId = getServerId($dbh, $siteId, $server);
    my $r_dmesgError = parseData($logFile);
    my $bcpFile = createBcpFile($r_dmesgError);
    my $table = "eniq_stats_dmesg";
    removeOldData($table);
    loadDb($bcpFile, $table);
    if($DEBUG > 1) {
        my $endTime = getCurrentTimeInMilliseconds();
        print "Start Time (EPOCH milliseconds): ${startTime}\n";
        print "End Time (EPOCH milliseconds): ${endTime}\n";
        print "Execution Time in milliseconds:".($endTime-$startTime)."\n";
    }
    $dbh->disconnect();

}

sub parseData {
    my $logFile = shift;
    my @dmesgArray = ();
    open FILE, "<$logFile" or die "Can't open file to read $logFile";
    while ( my $line = <FILE> ) {
        chomp($line);
        if ( my ($timeStamp, $errorMesg) = $line =~ /^(\w+\s+\d+\s+\d{2}:\d{2}:\d{2})\s+\w+\s+(.*)/ ) {
            my %r_dmesg_hash = (
                time_stamp   => "$timeStamp",
                error_mesg   => "$errorMesg"
            );
            push (@dmesgArray, \%r_dmesg_hash);
        }
    }

    if ( $DEBUG > 2 ) {
        print Dumper("Dmesg Hardware Error", @dmesgArray);
    }
    close FILE;
    return (\@dmesgArray);
}

sub createBcpFile {
    my $parsedDmesgError= shift;
    my $tmpDir = "/data/tmp";
    if ( exists $ENV{"TMP_DIR"} ) {
        $tmpDir = $ENV{"TMP_DIR"};
    }
    my $bcpFile = "$tmpDir/dmesgError.bcp";
    open BCP, ">$bcpFile" or die "Cannot open BCPFile $bcpFile";
    for my $dMesgError ( @$parsedDmesgError ) {
        printf BCP "%s|%s|%d|%d|%s\n",
        $date,
        $dMesgError->{time_stamp},
        $siteId,
        $serverId,
        $dMesgError->{error_mesg};
    }
    close BCP;
    if ($DEBUG > 3) {
        print "Printing BCP File\n";
        system ("/bin/cat $bcpFile");
    }
    return $bcpFile;
}

sub removeOldData {
    my $table = shift;
    my $deleteSql = "DELETE FROM $table WHERE siteId = $siteId AND serverId = $serverId AND date = '$date' ";
    if ( $DEBUG > 4 ) {
        print "Sql statement for deleting old data.\n $deleteSql\n";
    }
    dbDo($dbh, $deleteSql) or die "Failed to delete old data".$dbh->errstr."\n";
}

sub loadDb {
    my ($bcpFile, $table) = @_;
    my $loadSql = "LOAD DATA LOCAL INFILE \'$bcpFile\' INTO TABLE $table FIELDS TERMINATED BY \'|\'";
    if ( $DEBUG > 5 ) {
        print "Sql statement for loading data into the database.\n $loadSql\n";
    }
    dbDo($dbh, $loadSql) or die "Failed to load Data".$dbh->errstr."\n";
    unlink($bcpFile);
}

main();
