#!/usr/bin/perl
########################################################################################
#  Description --------- parseIngress -----------
#  This script parses the engine log file for DDP
#  and store data to Db
#  @author - Anam Pargal (xanampa)
#  usage parseIngress --logfile ${LOG_FILE} --site ${SITE} --date ${SQL_DATE}
########################################################################################
use strict;
use warnings;
use DBI;
use StatsTime;
use Getopt::Long;
use Data::Dumper;
use StatsDB;

###############################################################
# Globals
###############################################################
our $date;
our $siteId;
our $dbh;
our $bcpFile;
our $DEBUG = 0;
our @filelist = ();
our @parsed = ();
our $tmpDir = "/data/tmp";
our $table = "eniq_stats_file_ingress_processed";

sub ropTime {
    my $totalTime = 0;
    my $endTime = '23:59:00';
    my $ropEndTime = join(' ', $date, $endTime);
    my @allRopTime=();
    my %filelist_created_record = ();
    #it generates the 96 Rop times array.
    for ( my $ropIndex=0; $ropIndex<=95; $ropIndex++ ) {
        my $hour = (int $totalTime /3600);
        my $formatedHour = sprintf("%02d", $hour);
        my $min = ($totalTime-($hour*3600))/60;
        my $formatedMin = sprintf("%02d", $min);
        my $time = join(':', $formatedHour, $formatedMin, '00');
        my $ropStartime = join(' ', $date, $time);
        my $formatedRopStartTime = join('', $ropStartime, '');
        $totalTime = $totalTime+900;
        push(@allRopTime, $formatedRopStartTime);
    }
    push (@allRopTime, $ropEndTime);
    return @allRopTime;
}

sub main {
     my ($site, $logfile);
     my $result = GetOptions(
         "logfile=s" => \$logfile,
         "site=s"    => \$site,
         "date=s"    => \$date,
         "debug=s"   => \$DEBUG
         );
     ( -r $logfile ) or die "Cannot read log file $logfile";
     my $startTime = 0;
     my $endTime = 0;
     if($DEBUG > 1){
        $startTime = getCurrentTimeInMilliseconds();
     }
     $dbh = connect_db();
     $siteId = getSiteId($dbh,$site);
     parseLogfile($logfile);
     createBcpFile();
     loadDb($bcpFile);
     if($DEBUG > 1){
        $endTime = getCurrentTimeInMilliseconds();
        print "Start Time (EPOCH milliseconds): ${startTime}\n";
        print "End Time (EPOCH milliseconds): ${endTime}\n";
        print "Execution Time in milliseconds:".($endTime-$startTime)."\n";
    }
}

sub parseLogfile {
    my $logfile = shift;
    my ($filelist_parsed_counter, $filelist_created_counter, $filelist_created_flag, $filelist_parsed_flag);
    my $logFileName = (split /\//, $logfile)[-1];
    my $temporary_logfile = "/$tmpDir/tmp_$logFileName";
    my @rop = ropTime();
    `egrep "Parsed|Filelist created" $logfile | egrep -v "Filelist created 0" > $temporary_logfile`;
    open FILE, "<$temporary_logfile" or die "Can't open file to read $temporary_logfile";
    for (my $index = 0; $index < 96; $index++){
        $filelist_parsed_counter = 0;
        $filelist_created_counter = 0;
        $filelist_created_flag = 0;
        $filelist_parsed_flag = 0;
        while (my $line = <FILE>) {
            if ( $line =~ /.*(\d{2}:\d{2}:\d{2}).*Filelist created (\d+).*/ ) {
                my $timestamp = $1;
                my $filelist_created = $2;
                my $currentLineStartTimeInEpoch = parseTime( "$date $timestamp", $StatsTime::TIME_YYYYMD_HMS );
                my $currentROPInEpoch = parseTime( $rop[$index], $StatsTime::TIME_YYYYMD_HMS );
                my $nextROPInEpoch = parseTime( $rop[$index+1], $StatsTime::TIME_YYYYMD_HMS );
                if (!($currentROPInEpoch <= $currentLineStartTimeInEpoch and  $nextROPInEpoch > $currentLineStartTimeInEpoch)) {
                    seek(FILE, -length($line), 1);
                    last;
                }
                else {
                    $filelist_created_counter = $filelist_created + $filelist_created_counter;
                }
                my $rop_start_time = $rop[$index];
                if ( @filelist){
                    for my $ref ( @filelist ) {
                        if ( $ref->{rop_start} eq $rop_start_time ) {
                            $ref->{counter_filelist} = $filelist_created_counter;
                            $filelist_created_flag = 1;
                        }
                    }
                }
                if ( $filelist_created_flag != 1) {
                    my %filelist_created_record = (
                        rop_start        => $rop_start_time,
                        counter_filelist => $filelist_created_counter
                        );
                    push @filelist, \%filelist_created_record;
                }
            }
            elsif ( $line =~/.*(\d{2}:\d{2}:\d{2}).*Parsed: (\d+).*/ ){
                my $timestamp = $1;
                my $filelist_parsed = $2;
                my $currentLineStartTimeInEpoch = parseTime( "$date $timestamp", $StatsTime::TIME_YYYYMD_HMS );
                my $currentROPInEpoch = parseTime( $rop[$index], $StatsTime::TIME_YYYYMD_HMS );
                my $nextROPInEpoch = parseTime( $rop[$index+1], $StatsTime::TIME_YYYYMD_HMS );
                if (!($currentROPInEpoch <= $currentLineStartTimeInEpoch and  $nextROPInEpoch > $currentLineStartTimeInEpoch)) {
                    seek(FILE, -length($line), 1);
                    last;
                }
                else {
                    $filelist_parsed_counter = $filelist_parsed + $filelist_parsed_counter;
                }
                my $rop_start_time = $rop[$index];
                if ( @parsed) {
                    for my $ref ( @parsed ) {
                        if ( $ref->{rop_start} eq $rop_start_time ) {
                            $ref->{counter_parsed} = $filelist_parsed_counter;
                            $filelist_parsed_flag = 1;
                        }
                    }
                }
                if ( $filelist_parsed_flag != 1) {
                       my %parsed_record = (
                            rop_start      => $rop_start_time,
                            counter_parsed => $filelist_parsed_counter
                        );
                       push @parsed, \%parsed_record;
                }
            }
        }
    }
    close FILE;
    unlink($temporary_logfile);
    if ($DEBUG >= 2) {
        print Dumper ("Filelist Parsed Data", \@parsed);
        print Dumper ("Filelist created Data", \@filelist);
    }
}

sub createBcpFile {
    if ( exists $ENV{"TMP_DIR"} ) {
        $tmpDir = $ENV{"TMP_DIR"};
    }
    $bcpFile = "${tmpDir}/filelist.bcp";
    open BCP, ">$bcpFile" or die "Cannot open bcpFile";
    for my $parsed_ref (@parsed) {
        for my $created_ref (@filelist){
            if ( $created_ref->{rop_start} eq $parsed_ref->{rop_start} ){
                printf BCP "%s|%d|%d|%d\n",
                    $created_ref->{rop_start},
                    $siteId,
                    $created_ref->{counter_filelist},
                    $parsed_ref->{counter_parsed};
            }
        }
    }
    close BCP;
    if ($DEBUG >= 3) {
        print "Printing Bcp File\n";
        system ("/bin/cat $bcpFile");
    }
}

sub removeOldData {
    my $deleteSql = "DELETE FROM $table WHERE site_id = $siteId AND rop_time BETWEEN '$date 00:00:00' AND '$date 23:59:59'";
    if ($DEBUG >= 4) {
        print "Sql statement for deleting old data.\n";
        print "$deleteSql\n";
    }
    dbDo($dbh, $deleteSql) or die "Failed to delete old data".$dbh->errstr."\n";
}

sub loadDb {
    my $loadSql = "LOAD DATA LOCAL INFILE \'$bcpFile\' INTO TABLE $table FIELDS TERMINATED BY \'|\'";
    removeOldData();
    if ($DEBUG >= 5) {
        print "Sql statement for loading data into the database.\n";
        print "$loadSql\n";
    }
    dbDo($dbh, $loadSql) or die "Failed to load Data".$dbh->errstr."\n";
    $dbh->disconnect();
    unlink($bcpFile);
}

main();
