#!/usr/bin/perl

###################################################################################################################################################
# Description ---------   parseLogicalDrives --------------------
# This script parses the Logical Drives information of BIS/Netan/OCS and stores data to DB for DDP
# @author - SUNIL YADAV (xsunyad)
# usage parseLogicalDrives --logfile ${LOG_FILE} --site ${SITE} --server ${SERVER} --date ${SQL_DATE}
###################################################################################################################################################

use strict;
use warnings;
use StatsDB;
use DBI;
use StatsTime;
use Getopt::Long;
use Data::Dumper;

###############################################################
# Globals
###############################################################

our $DEBUG = 0;

sub main {
    my ($dbh, $site, $siteId, $server, $serverId, $logFile, $date);
    my $result = GetOptions(
        "logfile=s"  => \$logFile,
        "site=s"     => \$site,
        "server=s"   => \$server,
        "date=s"     => \$date,
        "debug=s"    => \$DEBUG
    );
    ( -r $logFile ) or die "Cannot read log file $logFile";
    $dbh = connect_db();
    $siteId = getSiteId($dbh, $site);
    $serverId = getServerId($dbh, $siteId, $server);
    my $r_parsedLogicalDriveInfo = parseData($logFile);
    my $bcpFile = createBcpFile($r_parsedLogicalDriveInfo, $siteId, $serverId);
    my $table = "bis_netan_logical_drive_details";
    removeOldData($table, $dbh, $siteId, $serverId, $date);
    loadDb($bcpFile, $table, $dbh);
    $dbh->disconnect();
}

sub parseData($) {
    my ($logFile) = @_;
    my @logicalDrivesArray = ();
    open FILE, "<$logFile" or die "Can't open file to read $logFile";
    while ( my $line = <FILE> ) {
        chomp($line);
        if ( my ($logDate, $name, $capacity, $freeSpace) = $line =~ /^"(\d+-\d+-\d+)-\d+:\d+:\d+"\s+"([\w:]+)"\s+"([\d.]+)"\s+"([\d.]+)"/ ) {
            my $usedPercent = (($capacity - $freeSpace) / $capacity) * 100;
            my %r_logical_drives_hash = (
                log_date     => "$logDate",
                name         => "$name",
                capacity     => "$capacity",
                free_space   => "$freeSpace",
                used_percent => "$usedPercent"
            );
            push (@logicalDrivesArray, \%r_logical_drives_hash);
        }
    }

    if ( $DEBUG > 1 ) {
        print Dumper("Logical Drives Information", @logicalDrivesArray);
    }
    close FILE;
    return (\@logicalDrivesArray);
}

sub createBcpFile($$$) {
    my ($parsedLogicalDrives, $siteId, $serverId) = @_;
    my $logicalDrivesBcpFile = getBcpFileName("logical_drive_details");
    open BCP, ">$logicalDrivesBcpFile" or die "Cannot open BCPFile $logicalDrivesBcpFile";
    for my $logicalDrives ( @$parsedLogicalDrives ) {
        printf BCP "%s|%d|%d|%s|%s|%s|%s\n",
        $logicalDrives->{log_date},
        $siteId,
        $serverId,
        $logicalDrives->{name},
        $logicalDrives->{capacity},
        $logicalDrives->{free_space},
        $logicalDrives->{used_percent};
    }
    close BCP;
    if ($DEBUG > 2) {
        print "Printing BCP File\n";
        system ("/bin/cat $logicalDrivesBcpFile");
    }
    return $logicalDrivesBcpFile;
}

sub removeOldData($$$$$) {
    my ($table, $dbh, $siteId, $serverId, $date) = @_;
    my $deleteSql = "DELETE FROM $table WHERE siteid = $siteId AND serverid = $serverId AND date = '$date' ";
    if ( $DEBUG > 3 ) {
        print "Sql statement for deleting old data.\n $deleteSql\n";
    }
    dbDo($dbh, $deleteSql) or die "Failed to delete old data".$dbh->errstr."\n";
}

sub loadDb($$$) {
    my ($bcpFile, $table, $dbh) = @_;
    my $loadSql = "LOAD DATA LOCAL INFILE \'$bcpFile\' INTO TABLE $table FIELDS TERMINATED BY \'|\'";
    if ( $DEBUG > 4 ) {
        print "Sql statement for loading data into the database.\n $loadSql\n";
    }
    dbDo($dbh, $loadSql) or die "Failed to load Data".$dbh->errstr."\n";
    unlink($bcpFile);
}

main();
