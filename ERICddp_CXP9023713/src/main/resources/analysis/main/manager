#!/bin/bash

EXIT_FILE=/tmp/ddp_manager.exit
RATE_LIMIT=1800
PARKED_MAX_DURATION=86400

log() {
    MSG=$1
    LOG_TIMESTAMP=$(date "+%y-%m-%d %H:%M:%S")
    echo "${LOG_TIMESTAMP} Manager ${MSG}"
}

doCheckPark() {
    local DELTA_READY=""
    local DELTA_DELETE=""

    ${ANALYSIS_BIN}/sql/runSql <<EOF > ${LOG_DIR}/parked_deltas.txt
use ${ADMINDB};
SELECT sitetype, site, DATE_FORMAT(date, "%d%m%y"), deltaindex, file,  TIME_TO_SEC(TIMEDIFF(NOW(),uploaded))
FROM file_parked
WHERE
 deltaindex > 0
EOF
    if [ $? -ne 0 ] ; then
        log "ERROR: runSql failed while querying file_parked"
        return
    fi

    while read LINE ; do
        local SITE_TYPE=$(echo $LINE | awk '{print $1}')
        local SITE_NAME=$(echo $LINE | awk '{print $2}')
        local DATE=$(echo $LINE | awk '{print $3}')
        local DELTA_INDEX=$(echo $LINE | awk '{print $4}')
        local FILE=$(echo $LINE | awk '{print $5}')
        local PARKED_DURATION=$(echo $LINE | awk '{print $6}')

        local ARCHIVE_INDEX_FILE=${DATA_DIR}/${SITE_TYPE}/${SITE_NAME}/data/${DATE}/ARCHIVE_INDEX

        if [ ! -r ${INCOMING_ROOT}/${FILE} ] ; then
            # File doesn't exist anymore so delete from table
            log "WARN: Removing non-existent file ${FILE}"
            DELTA_DELETE="${DELTA_DELETE} ${FILE}"
        elif [ ${PARKED_DURATION} -gt ${PARKED_MAX_DURATION} ] ; then
            log "WARN: Removing long term parked file ${FILE}: ${PARKED_DURATION}"
            DELTA_DELETE="${DELTA_DELETE} ${FILE}"
            /bin/rm -f ${INCOMING_ROOT}/${FILE}
        elif [ -s ${ARCHIVE_INDEX_FILE} ] ; then
            local ARCHIVE_INDEX=$(cat ${ARCHIVE_INDEX_FILE})
            local EXPECTED_INDEX=$(expr ${ARCHIVE_INDEX} + 1)
            if [ ${DELTA_INDEX} -eq ${EXPECTED_INDEX} ] ; then
                log "INFO: Resuming out of sequence ${FILE}"
                DELTA_READY="$DELTA_READY ${FILE}"
            elif [ ${DELTA_INDEX} -lt ${EXPECTED_INDEX} ] ; then
                log "WARN: Removing ${FILE}"
                DELTA_DELETE="${DELTA_DELETE} ${FILE}"
                /bin/rm -f ${INCOMING_ROOT}/${FILE}
            fi
        fi
    done < ${LOG_DIR}/parked_deltas.txt

    if [ ! -z "${DELTA_READY}" ] || [ ! -z "${DELTA_DELETE}" ] ; then
        echo "use ${ADMINDB};" > ${LOG_DIR}/update_parked.sql
        for FILE in ${DELTA_READY} ; do
            cat >> ${LOG_DIR}/update_parked.sql <<EOF
INSERT INTO file_processing (file,date,deltaindex,uploaded,siteid,site,sitetype,n_makestats)
 SELECT file,date,deltaindex,NOW(),siteid,site,sitetype,n_makestats FROM file_parked
  WHERE
   file = '${FILE}';
DELETE FROM file_parked WHERE file = '${FILE}';
EOF
        done
        for FILE in ${DELTA_DELETE} ; do
            cat >> ${LOG_DIR}/update_parked.sql <<EOF
DELETE FROM file_parked WHERE file = '${FILE}';
EOF
        done
        ${ANALYSIS_BIN}/sql/runSql < ${LOG_DIR}/update_parked.sql
    fi

    # Start processing any file that got parked cause it's processing too often
    # i.e. internal test sites uploading every 5mins
    ${ANALYSIS_BIN}/sql/runSql > /dev/null <<EOF
use ${ADMINDB};
SELECT @mintime := NOW() - INTERVAL ${RATE_LIMIT} SECOND;
INSERT INTO file_processing (file,date,deltaindex,uploaded,siteid,site,sitetype,n_makestats)
 SELECT file,date,deltaindex,NOW(),siteid,site,sitetype,n_makestats FROM file_parked
  WHERE
   deltaindex = 0 AND
   uploaded < @mintime;
DELETE FROM file_parked WHERE deltaindex = 0 AND uploaded < @mintime;
EOF

}

doCheckFile() {
    local FILE=$1

    local FULL_FILE=${INCOMING_ROOT}/${FILE}
    local FULL_DIR=$(dirname ${FULL_FILE})
    local SITEDATA=$(egrep "${FULL_DIR}\$" ${LOG_DIR}/sitelist.txt)
    if [ -z "${SITEDATA}" ] ; then
        return
    fi


    local SITE_ID=`echo $SITEDATA | cut -d: -f1`
    local SITE_NAME=`echo $SITEDATA | cut -d: -f2`
    local SITE_TYPE=`echo $SITEDATA | cut -d: -f3 | tr "[:upper:]" "[:lower:]"`

    local DATE=$(echo ${FILE} | awk -F\/ '{print $NF}' | awk -F_ '{print $3}' | sed 's/\.tar.gz$//')

    local SQL_DATE=$(echo ${DATE} | sed 's/\([0-9]\{2,2\}\)\([0-9]\{2,2\}\)\([0-9]\{2,2\}\)/20\3-\2-\1/g')

    ${ANALYSIS_BIN}/sql/runSql <<EOF > ${LOG_DIR}/makestats.count
use ${ADMINDB};
SELECT COUNT(*), MAX(UNIX_TIMESTAMP(uploaded)) FROM ddp_makestats WHERE siteid = ${SITE_ID} AND filedate = '${SQL_DATE}';
EOF
    local MAKESTATS_COUNT=$(cat ${LOG_DIR}/makestats.count | awk '{print $1}')

    local ACTION="processing"


    local DELTA_INDEX=0
    local FILE_ONLY=$(basename ${FILE} .tar.gz)
    FILE_TYPE=$(echo ${FILE_ONLY} | awk -F_ '{print $2}')
    if [ "${FILE_TYPE}" = "Delta" ] ; then
        DELTA_INDEX=$(echo ${FILE_ONLY} | awk -F_ '{print $4}')
        local ARCHIVE_INDEX_FILE=${DATA_DIR}/${SITE_TYPE}/${SITE_NAME}/data/${DATE}/ARCHIVE_INDEX
        if [ -s ${ARCHIVE_INDEX_FILE} ] ; then
            local ARCHIVE_INDEX=$(cat ${ARCHIVE_INDEX_FILE})
            if [ -z "${ARCHIVE_INDEX}" ] ; then
                log "WARN: Empty ARCHIVE_INDEX_FILE ${ARCHIVE_INDEX_FILE} - Parking ${FILE}"
                ACTION="parked"
            else
                local EXPECTED_INDEX=$(expr ${ARCHIVE_INDEX} + 1)
                if [ ${DELTA_INDEX} -ne ${EXPECTED_INDEX} ] ; then
                    log "INFO: Parking out of order ${DELTA_INDEX}/${EXPECTED_INDEX} ${FILE}"
                    ACTION="parked"
                fi
            fi
        else
            # ARCHIVE_INDEX doesn't exist so we have to park
            log "INFO: Parking out of order ${FILE}"
            ACTION="parked"
        fi
    elif [ ! -z "${MAKESTATS_COUNT}" ] && [ ${MAKESTATS_COUNT} -gt 0 ] && [ "${PARK_DISABLED}" != "yes" ]; then
        local LAST_UPLOADED=$(cat ${LOG_DIR}/makestats.count | awk '{print $2}')
        local NOW=$(date +%s)
        local SECONDS_SINCE_PREV=$(expr ${NOW} - ${LAST_UPLOADED})
        if [ "${SECONDS_SINCE_PREV}" -lt 1800 ] ; then
            log "INFO: Parking to rate limit ${FILE}"
            ACTION="parked"
        fi
    fi

    local UPLOADED_TIME=$(date "+%Y-%m-%d %H:%M:%S")
    local ROW=$(printf "%s\t%s\t%d\t%s\t%d\t%s\t%s\t%d\n" ${FILE} ${SQL_DATE} ${DELTA_INDEX} "${UPLOADED_TIME}" ${SITE_ID} ${SITE_NAME} ${SITE_TYPE} ${MAKESTATS_COUNT})
    local BCP_FILE=${LOG_DIR}/${ACTION}.sql
    echo "${ROW}" >> ${BCP_FILE}
}

doCheckFiles() {
    if [ -r /tmp/debug_manager ] ; then
        set -xv
    else
        set +xv
    fi

    #
    # First off, look for files in the FTP root, mmin is to ignore files that are still in the middle of uploading
    # Note: We need to filter out files in the upload and adc directories - they are handled by their own scripts
    #
    local FILES_ON_FILESYSTEM_RAW=$(find ${INCOMING_ROOT} -type f -mmin +1 \( -name "DDC_*.tar.gz" -o -name "*@DDC_*.tar.gz" \) | sed "s|^${INCOMING_ROOT}/||" | egrep -v '^upload/|^adc/')
    if [ -z "${FILES_ON_FILESYSTEM_RAW}" ] ; then
        return
    fi

    #
    # Rename any files that are using the prefix
    #
    local FILES_ON_FILESYSTEM=""
    for FILE in ${FILES_ON_FILESYSTEM_RAW} ; do
        echo "${FILE}" | grep --silent '@'
        if [ ${PIPESTATUS[1]} -eq 0 ] ; then
            local FILE_AND_PREFIX=$(basename ${FILE})
            local DIR_ONLY=$(dirname ${FILE})
            local PREFIX=$(echo ${FILE_AND_PREFIX} | awk -F@ '{print $1}')
            local DDC_FILE=$(echo ${FILE_AND_PREFIX} | awk -F@ '{print $2}')
            # We expect a file with a prefix to have <prefix>/<prefix>@DDC_.tar.gz
            if [ "${DIR_ONLY}" = "${PREFIX}" ] ; then
                # Strip the prefix
                /bin/mv -f ${INCOMING_ROOT}/${FILE} ${INCOMING_ROOT}/${DIR_ONLY}/${DDC_FILE}
                FILES_ON_FILESYSTEM="${FILES_ON_FILESYSTEM} ${DIR_ONLY}/${DDC_FILE}"
            else
                log "ERROR: Invalid prefix in ${FILE}, deleting"
                /bin/rm -f ${INCOMING_ROOT}/${FILE}
            fi
        else
            # Normal format, i.e. no prefix
            FILES_ON_FILESYSTEM="${FILES_ON_FILESYSTEM} ${FILE}"
        fi
    done

    if [ -z "${FILES_ON_FILESYSTEM}" ] ; then
        return
    fi

    #
    # Now get the  list of files from the DB
    # that we've already registered to be processed but are still awaiting
    # processing
    #
    FAP=${LOG_DIR}/mgr_files_awaiting_processing.txt

    ${ANALYSIS_BIN}/sql/runSql <<EOF > ${FAP}
use ${ADMINDB};
SELECT file FROM file_processing;
SELECT file FROM file_parked;
EOF
    if [ $? -ne 0 ] ; then
        log "ERROR: runSql failed while querying file_processing"
        return
    fi

    FILES_TO_STORE=""
    for FILE in ${FILES_ON_FILESYSTEM} ; do
        grep ${FILE} ${FAP} > /dev/null
        if [ $? -ne 0 ] ; then
            FILES_TO_STORE="${FILES_TO_STORE} ${FILE}"
        fi
    done

    if [ -z "${FILES_TO_STORE}" ] ; then
        return
    fi



    #
    # Store new files in the database
    #
    ${ANALYSIS_BIN}/main/getSiteList -a > ${LOG_DIR}/sitelist.txt

    for ACTION in processing parked ; do
        local BCP_FILE="${LOG_DIR}/${ACTION}.sql"
        if [ -r ${BCP_FILE} ] ; then
            rm -f ${BCP_FILE}
        fi
    done

    for FILE in ${FILES_TO_STORE} ; do
        doCheckFile ${FILE}
    done

    for ACTION in processing parked ; do
        local BCP_FILE="${LOG_DIR}/${ACTION}.sql"
        if [ -r ${BCP_FILE} ] ; then
            ${ANALYSIS_BIN}/sql/runSql <<EOF
use ${ADMINDB};
LOAD DATA LOCAL INFILE '${BCP_FILE}' INTO TABLE file_${ACTION} (file,date,deltaindex,uploaded,siteid,site,sitetype,n_makestats);
EOF
            rm ${BCP_FILE}
        fi
    done
}

ANALYSIS_BIN=`dirname $0`
ANALYSIS_BIN=`cd ${ANALYSIS_BIN} ; cd .. ; pwd`

if [ ! -r "$1" ]; then
    echo "Usage: $0 configfile"
    exit 1
fi
CONFIG_FILE=$1
. ${CONFIG_FILE}

if [ -d /usr/local/bin ] ; then
    export PATH=/usr/local/bin:$PATH
fi

LOG_DIR=/data/tmp/ddp_manager
if [ ! -d ${LOG_DIR} ] ; then
    mkdir ${LOG_DIR}
else
    find ${LOG_DIR} -type f -exec rm {} \;
fi

#
#Truncate the file_processing as it should be empty on startup.
#
${ANALYSIS_BIN}/sql/runSql <<EOF
use ${ADMINDB};
TRUNCATE TABLE file_processing;
TRUNCATE TABLE file_parked;
EOF

DO_WORK_EVERY=6
WORK_COUNT=${DO_WORK_EVERY}
while [ ! -r ${EXIT_FILE} ] ; do
    if [ ${WORK_COUNT} -ge ${DO_WORK_EVERY} ] ; then
        doCheckFiles
        doCheckPark
        WORK_COUNT=0
    else
        WORK_COUNT=$(expr ${WORK_COUNT} + 1)
    fi

    if [ ! -r ${EXIT_FILE} ] ; then
        sleep 10
    fi
done

rm -f ${EXIT_FILE}
