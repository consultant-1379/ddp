#!/usr/bin/env perl
#
use Getopt::Long;
use strict;
use Data::Dumper;
use StatsDB;
use StatsCommon;
use StatsTime;
use DBI;

our $DEBUG = 0;

sub main {
    my ($msgFile, $site, $server, $sqlDate);
    my $result = GetOptions(
        "sqldate=s"   => \$sqlDate,
        "server=s"    => \$server,
        "site=s"      => \$site,
        "file=s"      => \$msgFile,
        "debug=s"     => \$DEBUG,
    );

    if ( $DEBUG > 0 ) { setStatsDB_Debug($DEBUG); }
    my $dbh = connect_db();

    my $siteId = getSiteId($dbh,$site);
    if ( $siteId == -1 ) {
        print "ERROR: Could not find siteid for $site\n";
        return;
    }
    my $serverId = getServerId($dbh,$siteId,$server);
    if ($serverId == -1) {
        print "ERROR: Could not find serverId for $server in $site\n";
        return;
    }

    # NOTE: From 'TORF-88456' onwards, 'Server Messages' are no longer stored under DB. Instead they
    # are directly retrieved from 'messages'/'messages.txt' files present under
    # '/data/stats/<OSS>/<SITE>/data/<DDMMYY>/' directory and presented in DDP GUI.
    my @genericMeasurements = ();
    open FILE, $msgFile or die "Couldn't open file: $!";
    while ( my $line = <FILE> ) {
	if ( $DEBUG > 9 ) { print "main: line $line\n"; }
	if ( $line =~ /DDP_GENERIC_MEASUREMENT DATE=(\d{14,14}) GROUP=(\S+) (.*)/ ) {
	    my ($time,$group,$measurement) = ( $1, $2, $3 );	    
	    if ( $DEBUG > 7 ) { print "main: gen measure time=$time group=$group measure=$measurement\n"; }
	    my $r_genericMeasurement = {
		'time' => $time,
		'group' => $2,
		'values' => {}
	    };
	    my @nameValues = split(/ /, $measurement);
	    foreach my $nameValue ( @nameValues ) {
		my ($name,$value) = $nameValue =~ /^([^ =]+)=(\d+)/;
		$r_genericMeasurement->{'values'}->{$name} = $value;
	    }	  

	    push @genericMeasurements, $r_genericMeasurement;
	}
    }

    if ( $#genericMeasurements > -1 ) {
	my %measurementNames = ();
	foreach my $r_measurement ( @genericMeasurements ) {
	    foreach my $name ( keys %{$r_measurement->{'values'}} ) {
		$measurementNames{$r_measurement->{'group'}}->{$name}++;
	    }
	}
	my $r_idMap = getMeasIdMap($dbh, \%measurementNames );

	my @sortedGM = sort by_time @genericMeasurements;
	dbDo($dbh,sprintf("DELETE FROM gen_measurements WHERE siteid = %d AND serverid = %d AND time BETWEEN '%s' AND '%s'",
			  $siteId, $serverId, toSqlTimeStamp($sortedGM[0]->{'time'}), toSqlTimeStamp($sortedGM[$#sortedGM]->{'time'})))
	    or die "Failed to delete old data";
	foreach my $r_measurement ( @genericMeasurements ) { 
	    foreach my $name ( keys %{$r_measurement->{'values'}} ) {	   
		dbDo($dbh,sprintf("INSERT INTO gen_measurements (time,siteid,serverid,mid,value) VALUES ('%s',%d,%d,%d,%d)",
				  toSqlTimeStamp($r_measurement->{'time'}),$siteId, $serverId, 
				  $r_idMap->{$r_measurement->{'group'}}->{$name},
				  $r_measurement->{'values'}->{$name})
		    ) or die "Failed to insert row";
	    }
	}
    }
}

sub toSqlTimeStamp($) {
    my ($time) = @_;

    my ($year,$month,$day,$hour,$min,$sec) = $time =~ /^(\d{4,4})(\d{2,2})(\d{2,2})(\d{2,2})(\d{2,2})(\d{2,2})$/;
    return sprintf("%04d-%02d-%02d %02d:%02d:%02d", $year,$month,$day,$hour,$min,$sec);    
}

sub by_time {
    return $a->{'time'} <=> $b->{'time'};
}

sub getMeasIdMap
{
    my ($dbh,$r_measurementNames) = @_;

    if ( $DEBUG > 5 ) { print "getMeasIdMap\n"; }

    my $sql = sprintf("SELECT id, grp, name FROM gen_meas_names");

    $dbh->{AutoCommit} = 0;  # enable transactions, if possible
    $dbh->{RaiseError} = 1;

    my $r_IdMap = {};

    eval {
	my $sth = $dbh->prepare($sql)
	    or die "Couldn't prepare statement: " . $dbh->errstr;
	$sth->execute()             # Execute the query
	    or die "Couldn't execute statement: " . $sth->errstr;

	while ( my $r_row = $sth->fetchrow_arrayref() ) {
	    $r_IdMap->{$r_row->[1]}->{$r_row->[2]} = $r_row->[0];	    
	}
	$sth->finish;

	if ( $DEBUG > 4 ) { print Dumper("getMeasIdMap read idMap", $r_IdMap); };

	foreach my $group ( keys %{$r_measurementNames} ) {
	    foreach my $name ( keys %{$r_measurementNames->{$group}} ) {
		if ( ! exists $r_IdMap->{$group}->{$name} ) {
		    dbDo( $dbh, sprintf("INSERT INTO gen_meas_names (grp,name) VALUES (%s,%s)", 
					$dbh->quote($group), 
					$dbh->quote($name)) )  or
					    die "Failed to insert into gen_meas_name";	    
		    my $id = $dbh->last_insert_id(undef,undef,"ne","id");
		    if ( $DEBUG > 2 ) { print "getMeasIdMap: id=$id\n"; }	    
		    $r_IdMap->{$group}->{$name} = $id;
		}
	    }
	}
	
	$dbh->commit;   # commit the changes if we get this far
    };
    if ($@) {
	warn "Transaction aborted because $@";
	# now rollback to undo the incomplete changes
	# but do it in an eval{} as it may also fail
	eval { $dbh->rollback };
	# add other application on-error-clean-up code here
	die "Update of ne failed";
    }
    
    
    $dbh->{AutoCommit} = 1;  
    $dbh->{RaiseError} = 0;

    
    if ( $DEBUG > 4 ) { print Dumper("getMeasIdMap", $r_IdMap); };

    return $r_IdMap;
}

main;
